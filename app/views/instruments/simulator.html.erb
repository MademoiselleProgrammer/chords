<script>	

// run status for each instrument
<% @instruments.each do |instrument| %>
<%= "window.instrument_#{instrument.id}_run_status =  false;" %>
<% end %>

// variable shortnames for each instrument.
<% @instruments.each do |instrument| %>
var instrument_<%= instrument.id %>_shortnames = [];
<% instrument.vars.each do |var| %>
instrument_<%= instrument.id %>_shortnames.push("<%= var.shortname %>");
<% end %>
<% end %>

function shortnames(id) {
  var command = "var names = instrument_" + id + "_shortnames";
  eval(command);
  return names;
}

function running(id) {
  // return the running status for this id
  var command = "var run_status = window.instrument_" + id + "_run_status;";
  eval(command);
  return run_status;
}

function random_value() {
  // these values to be replaced later by configuration values:
  var measure_min   = 5.0;
  var measure_max   = 25.0;
  var measure_sigma = 10.0;
  var avg   = (measure_max + measure_min)/2.0;
  var value = avg + (Math.random()-0.5) * 2 * measure_sigma;
  value = value.toPrecision(4);
  return value;
}

function makeHttpObject() {
  try {return new XMLHttpRequest();}
  catch (error) {}
  try {return new ActiveXObject("Msxml2.XMLHTTP");}
  catch (error) {}
  try {return new ActiveXObject("Microsoft.XMLHTTP");}
  catch (error) {}

  throw new Error("Could not create HTTP request object.");
}

function send_url(url) {
  var request = makeHttpObject();
  request.open("GET", url, false);
  request.send(null);
}

function measurement_url(id) {
  var url = "/measurements/url_create?instrument_id=" + id;

  var s = shortnames(id);
  for (var i = 0; i < s.length; i++) {
    url += "&" + s[i] + "=" + random_value(); 
  }

  // Set the measurement time. 
  var utc_time = new Date();
  utc_time.setUTCMilliseconds(0);
  url += "&at=" + utc_time.toISOString(); 
  
  // flag this as test data
  url += "&test";

  // add the security data_entry_key
  <% if @profile.secure_data_entry == true %>
    url += "&key=" + "<%= @profile.data_entry_key %>";
  <% end %>

  return(url);
}

function single_measurement(id) {
  // create the url_create string
  var url = measurement_url(id);
  
  if ($('#instrument_simulator_requests').children().length > 10) {
    $('#instrument_simulator_requests').find('div').first().remove();
  }

  $('#instrument_simulator_requests').append("<div>" + url + "</div>");
  
  send_url(url);
}

function repeat_measurement(id, refresh_ms) {
  if (running(id) == true) {
    // schedule next measurement
    setTimeout(function() {repeat_measurement(id, refresh_ms);}, refresh_ms);
    // create and send a new measurement
    single_measurement(id);
  }
}

function toggle_run_state(id, refresh_ms) {
  // get the value of the simulator status for the instrument
  var command = "var simulator_status = window.instrument_" + id + "_run_status;";
  eval(command);

  if (simulator_status == false) {
    eval("window.instrument_" + id + "_run_status = true;");

    var command = "simulator_status = window.instrument_" + id + "_run_status;";
    
    eval("$('#instrument_" + id + "_simulator_icon').attr('src', '/assets/toggle-switch-on.png')");
    repeat_measurement(id, refresh_ms);
    
  } else {
    eval("window.instrument_" + id + "_run_status = false;");
    eval("$('#instrument_" + id + "_simulator_icon').attr('src', '/assets/toggle-switch-off.png')");
  }
}

</script>

<h1>Simulator</h1>
<p>Simulated measurements will be marked as "test", and 
<strong>will be deleted</strong> when the "Delete Test Data" button is pressed.</p>
<p>The simulations will be stopped if you close this page. You may want 
to run them in a separate tab by right-clicking the 
<%= link_to 'simulator', '/instruments/simulator' %> link and choosing "Open Link in New Tab".</p>

<table>
  <thead>
    <tr>
      <th align="center">Name</th>
      <th align="center">ID</th>
      <th align="center">Site</th>
      <th align="center">Interval<br/>(s)</th>
      <th align="center">Simulator<br/>Status</th>
    </tr>
  </thead>

  <tbody>
    <% @instruments.each do |instrument| %>
      <tr>
        <td> <%= link_to(instrument.name, instrument_url(:id => instrument.id) )%></td>
        <td align="center"><%= instrument.id %></td>
        <td><%= @sites.find(instrument.site_id).name %></td>
        <td align="center"><%= instrument.sample_rate_seconds %></td>
        <td align="center">
	       <%= image_tag('toggle-switch-off.png', size:"62X25", id:"instrument_#{instrument.id}_simulator_icon", 
	           onclick:"toggle_run_state(#{instrument.id}, #{instrument.sample_rate_seconds}*1000);")%>
       </td>

      </tr>
    <% end %>
  </tbody>
</table>

<br>

<div id='instrument_simulator_requests' style="background-color: black; color: white;">
</div>

