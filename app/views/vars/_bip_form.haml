%td
  - if can?(:manage, Var)
    = best_in_place variable, :shortname, :as => :input
  - else
    = variable.shortname
%td =
%td
  - if can?(:manage, Var)
    = best_in_place variable, :name, :as => :input
  - else
    = variable.name
%td
  - if can?(:manage, Var)
    = best_in_place variable, :units, :as => :input
  - else
    = variable.units


%td
  - if can?(:manage, Var)
    = best_in_place variable, :minimum_plot_value, :as => :input
  - else
    = variable.minimum_plot_value


%td
  - if can?(:manage, Var)
    = best_in_place variable, :maximum_plot_value, :as => :input
  - else
    = variable.maximum_plot_value



%td
  - if can?(:manage, Var)
    - form_tag_id = "mp_for_tag_#{variable.id}"
    = autocomplete_field_tag form_tag_id, variable.measured_property.label, autocomplete_measured_property_label_vars_path, {class: "search-query", placeholder: "Start Typing...", type: "search"}
    :javascript
      $(document).ready(function(){
      	$("##{form_tag_id}").bind('railsAutocomplete.select', function(event, data){
      		/* Submit the new value to update the DB */


      		var url = "/vars/#{variable.id}";

      		// To prevent xss attacks, a csrf token must be defined as a meta attribute
      		var csrf_token = jQuery('meta[name=csrf-token]').attr('content'),
      		csrf_param = jQuery('meta[name=csrf-param]').attr('content');

      		var submit_data = "_method=" + 'put';
      		submit_data += "&" + 'var' + '[' + 'measured_property_id' + ']=' + data['item']['id'];

      		if (csrf_param !== undefined && csrf_token !== undefined) {
      			submit_data += "&" + csrf_param + "=" + encodeURIComponent(csrf_token);
      		}

      		$.ajax({
      			type: "PUT",
      			dataType: "script",
      			url: url,
      			contentType: 'application/json',
      			data: JSON.stringify({ var:{measured_property_id:data['item']['id']}, _method:'put', csrf_param: encodeURIComponent(csrf_token) })
      		}).done(function( msg ) {
      			alert( "Data Saved: " + msg );
      		});
      	});
      });
  - else
    = variable.measured_property.label
%td
  - if can?(:manage, Var)
    = link_to variable, method: :delete, :data => {:confirm => "Are you sure you want to permanently delete the variable #{variable.name} and all associated data?"} do
      Destroy
