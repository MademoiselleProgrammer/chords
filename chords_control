#!/usr/local/bin/python

import yaml
import argparse
from collections import OrderedDict

#####################################################################
"""
"""
class ChordsConfig(OrderedDict):
    def __init__(self, configfile):
        OrderedDict.__init__(self)
        
        # Initialize the configuration item descriptions. These are 
        # used as comments in the output configuration file.
        self.initConfigItems()
        
        # Get the current configuration file
        self.configfile = open(configfile)
        try:
            config = yaml.load(self.configfile.read())
        except yaml.YAMLError, exc:
            print "Error in configuration file:", exc
        
        for key in config.keys():
            self[key] = config[key]

    def initConfigItems(self):
        self.configItems  = OrderedDict()
        
        
        self.configItems["CHORDS_ADMIN_PW"] = ConfigItem(description=
"""The password for r/w and admin access to CHORDS, mysql and influxdb.
Replace this with a strong password.""", 
        default="chords_ec_demo")
        
        self.configItems["CHORDS_GUEST_PW"] = ConfigItem(description=
"""The password for read-only access to influxdb""", 
        default="guest")
        
        self.configItems["SECRET_KEY_BASE"] = ConfigItem(description=
"""A secret key base for Rails. Generate a secure value (*add link with instructions*).""", 
        default="aaaaaaaaaaa")
        
        self.configItems["DB_RETENTION"]    = ConfigItem(description=
"""The time series database retention duration, e.g. 168h or 52w. Use "inf" for permanent.
This value can be changed on successive restarts of a portal. Note: making it shorter
will trim the existing time series database.""", 
        default="inf")
        
        self.configItems["DOCKER_TAG"]      = ConfigItem(description=
"""The docker image tag of the desired CHORDS image.""", 
        default="latest")
        
        self.configItems["RAILS_ENV"]       = ConfigItem(description=
"""The RAILS environment. Unlikely to to use anything other than "production".""", 
        default="production")
        
        self.configItems["WORKERS"]         = ConfigItem(description=
"""The number of nginx workers.""", 
        default=4)
        
#####################################################################
"""
"""
class ConfigItem(OrderedDict):
    def __init__(self, default, description):
        OrderedDict.__init__(self)
        self["default"] = default
        self["description"] = description
    
#####################################################################
"""
"""
class ChordsEnv:
    def __init__(self):
        pass
    
#####################################################################
"""
Manage the command line options.
The options are collated in a dictionary keyed on the option long name.
The option dictionary will have None for options that aren't present.
"""
class CommandArgs:
    def __init__(self):
        
        description=("""
        Control CHORDS configuration and operation.
        
        In configuration mode, you are prompted for configuration options. These will be
        saved in th configuration file. The CHORDS environment file (".env") will also
        be created from the configuration.
        """)
        
        epilog = ("""
        Only one of -c, -r, -s, or -u can be specified.
        """)
        
        parser = argparse.ArgumentParser(description=description, epilog=epilog)
        parser.add_argument("-f", "--file",        help="configuration file (default chords.yml)", default="chords.yml", action="store")
        parser.add_argument("-c", "--config",      help="configure",      default=False, action="store_true")
        parser.add_argument("-r", "--run",         help="run",            default=False, action="store_true")
        parser.add_argument("-s", "--stop",        help="stop",           default=False, action="store_true")
        parser.add_argument("-u", "--update",      help="update",         default=False, action="store_true")
        parser.add_argument("-v", "--verbose",     help="verbose output", default=False, action="store_true")
        parser.add_argument("-d", "--dryrun",      help="dry run",        default=False, action="store_true")

        # Parse the command line. 
        args = parser.parse_args()
        self.options = vars(args)
        
        # Make sure that at most only one of these args was specified
        o = self.options
        if [o['config'], o['run'], o['stop'], o['update']].count(True) > 1:
            parser.print_help()
            exit(1)
        
    def get_options(self):
        # return the dictionary of existing options.
        return self.options 

#####################################################################
#####################################################################

# Get the command line options
options = CommandArgs().get_options()
print options
print

config = ChordsConfig(options['file'])
print config
print

for c in config.configItems.keys():
    print c, ":"
    for i in config.configItems[c].keys():
        print "  ", i, ": ", config.configItems[c][i]
    


