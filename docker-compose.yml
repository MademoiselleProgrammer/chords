version: '2'

# The CHORDS configuration (x86) for docker-compose. 
#
# It defines these services:
#   1. chords_mysql:    A MyQSL database for CHORDS metadata.
#   2. chords_influxdb: An InfluxDB database for real-time time series data.
#   3. chords_grafana:  A Grafana dashboard server
#   4. chords_app:   The CHORDS Ruby on Rails server
# The following docker volumes provide data persistance:
#   1. mysql-data:     (/var/lib/mysql)
#   2. influxdb-data:  (/var/lib/influxdb)
#   3. grafana-data:   (/var/lib/grafana)
#
# This configuration is used to both build the chords image,
# and to deploy the CHORDS system. Dockerfile provides the recipe
# for the chords image.
#
# To build and upload the chords image:
#   cd <directory containing the CHORDS project>
#   docker build --squash --tag ncareol/chords:<branch>
#   docker push ncareol/chords:<branch>
#
# Create a .env (in the directory that you run docker-compose from) containing:
# CHORDS_ADMIN_PW=<password>       # The password for r/w and admin access to CHORDS, mysql and influxdb.
# CHORDS_GUEST_PW=<password>       # The password for ro access to influxdb.
# DOCKER_TAG=<git branch>          # Convention is to use the git branch used to generate the image as the tag.
# DB_RETENTION=<duration>          # Time series database retention duration, e.g. 168h or 52w. Use "INF" for permanent.
#
# These environment variables may also be provided in .env, but have default values otherwise:
# SECRET_KEY_BASE=<strong key, generated as suggested by rake.>
# RAILS_ENV=production|development
# 
# To deploy/start/stop CHORDS:
#   curl -L https://github.com/NCAR/chords_portal/raw/<branch>/docker-compose.yml > docker-compose.yml
#   docker-compose pull 
#   docker-compose -p chords up -d
#   docker-compose -p chords down
#
# To update a running system:
#  docker-compose pull
#  docker-compose -p chords down
#  docker-compose -p chords up -d

services:
  app:
    container_name: chords_app
    build:
      context: ./
      dockerfile: Dockerfile
    image: ncareol/chords:${DOCKER_TAG}
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      - RAILS_ENV=${RAILS_ENV}
      - CHORDS_ADMIN_PW=${CHORDS_ADMIN_PW}
      - CHORDS_GUEST_PW=${CHORDS_GUEST_PW}
      - SECRET_KEY_BASE=aaaaaaaaaaa
      - DB_RETENTION=${DB_RETENTION}
      #  Note: INFLUXDB_ variables are used by the Influxer gem.
      - INFLUXDB_USERNAME=admin
      - INFLUXDB_PASSWORD=${CHORDS_ADMIN_PW}
    command: bash -c "dos2unix ./chords_start.sh && chmod a+x ./chords_start.sh && ./chords_start.sh"
    ports:
        - "80:80"
    links:
      - mysql
      - mta


  mysql:
    container_name: chords_mysql
    image: mysql:5.7
    volumes:
      - mysql-data:/var/lib/mysql
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=1
      - MYSQL_USER=chords_demo_user
      - MYSQL_PASSWORD=${CHORDS_ADMIN_PW}
      
  influxdb:
    container_name: chords_influxdb
    image: influxdb:1.2
    volumes:
      - influxdb-data:/var/lib/influxdb/
    environment:
      - INFLUXDB_HTTP_MAX_ROW_LIMIT=1000000
      - INFLUXDB_HTTP_AUTH_ENABLED=true
    ports:
      - 8086:8086
      - 8083:8083
      
  grafana:
    container_name: chords_grafana
    image: grafana/grafana:4.1.1
    volumes:
      - grafana-data:/var/lib/grafana/
    ports:
      - 3000:3000

# https://hub.docker.com/r/tozd/postfix/~/dockerfile/
  mta:
    container_name: chords_mta
    image: tozd/postfix
    volumes:
      - postfix-spool:/var/spool/postfix
    build:
      context: ./postfix/.
      dockerfile: Dockerfile
    environment:
      - MY_NETWORKS=172.18.0.0/16 127.0.0.0/8
    ports:
      - 25:25


volumes:
  mysql-data: 
  influxdb-data:
  grafana-data:
  postfix-spool:
  
